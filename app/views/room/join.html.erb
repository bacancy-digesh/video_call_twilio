<% if @room.user_id == current_user.id%>
  <button id="join-button">join</button>
<% else %>
  <button id="join-button-participant">join</button>
<% end %>

<button id="leave-button" class="hidden" style= "display:none">Leave Room</button>

<button id="button-share-screen" style= "display:none">Share screen</button>
<button id="button-unshare-screen" style= "display:none">Stop Share screen</button>
<button id="btn_mute" class="btn btn-success" style= "display:none">Mute Audio</button>
<button id="btn_unmute" class="btn btn-success" style= "display:none">UnMute Audio</button>
<button id="btn_disable_video" class="btn btn-success" style= "display:none">Disable Video</button>
<button id="btn_enable_video" class="btn btn-success" style= "display:none">Enable Video</button>


<div id="local-media-container">
</div>

<script src="//media.twiliocdn.com/sdk/js/video/releases/2.3.0/twilio-video.min.js"></script>

<script>

    let screenTrack;

  if(document.body.contains(document.getElementById('join-button'))){
    const joinButton = document.getElementById("join-button");
      joinButton.addEventListener("click", async (event) => {
        await joinRoom(event, "provider");
      });
  }
  if(document.body.contains(document.getElementById('join-button-participant'))){
    const joinButton = document.getElementById("join-button-participant");
      joinButton.addEventListener("click", async (event) => {
        await joinRoom(event, "participant");
      });
  }



 const joinRoom = async (event, identity) => {

  const Video = Twilio.Video;

  localvideo = await Video.createLocalTracks({
   audio: true,
   video: { height: 520, frameRate: 24, width: 1000 },
  });

  const localTracks = await Video.createLocalTracks({
   audio: true,
   video: { height: 720, frameRate: 24, width: 1280 },
  });
 try {
   room = await Video.connect(gon.token, {
     name: gon.ROOM_NAME,
     tracks: localTracks,
      bandwidthProfile: {
        video: {
          mode: 'collaboration',
          maxTracks: 10,
          dominantSpeakerPriority: 'standard',
          renderDimensions: {
            high: {height:1080, width:1920},
            // standard: {height:520, width:1000},
            <%# low: {height:176, width:144} %>
          }
        }
      },
      dominantSpeaker: true,
      maxAudioBitrate: 16000,
      preferredVideoCodecs: [{ codec: 'VP8', simulcast: true }],
      networkQuality: {local:1, remote: 2}
  });
 } catch (error) {
   console.log(error);
 }

  // display your own video element in DOM
  // localParticipants are handled differently
  // you don't need to fetch your own video/audio streams from the server
  const localMediaContainer = document.getElementById("local-media-container");
  localTracks.forEach((localTrack) => {
    localMediaContainer.appendChild(localTrack.attach());
  });

  // display video/audio of other participants who have already joined
  room.participants.forEach(onParticipantConnected);

  // subscribe to new participant joining event so we can display their video/audio
  room.on("participantConnected", onParticipantConnected);

  room.on("participantDisconnected", onParticipantDisconnected);

  toggleButtons();

  event.preventDefault();

    document.getElementById("btn_mute").style.display = 'block';
    document.getElementById("btn_disable_video").style.display = 'block';
    document.getElementById("leave-button").style.display = 'block';
    document.getElementById("button-share-screen").style.display = 'block';


    if(document.body.contains(document.getElementById('join-button'))){
      document.getElementById('join-button').style.display = 'none';
    }
    if(document.body.contains(document.getElementById('join-button-participant'))){
      document.getElementById('join-button-participant').style.display = 'none';
    }

  };

  // when a participant disconnects, remove their video and audio from the DOM.
  const onParticipantDisconnected = (participant) => {
  const participantDiv = document.getElementById(participant.sid);
  participantDiv.parentNode.removeChild(participantDiv);
  };

  const onParticipantConnected = (participant) => {
  const participantDiv = document.createElement("div");
  participantDiv.id = participant.sid;

  // when a remote participant joins, add their audio and video to the DOM
  const trackSubscribed = (track) => {
    participantDiv.appendChild(track.attach());
  };
  participant.on("trackSubscribed", trackSubscribed);

  participant.tracks.forEach((publication) => {
    if (publication.isSubscribed) {
      trackSubscribed(publication.track);
    }
  });

  document.body.appendChild(participantDiv);

  const trackUnsubscribed = (track) => {
    track.detach().forEach((element) => element.remove());
  };

  participant.on("trackUnsubscribed", trackUnsubscribed);
  };

  const onLeaveButtonClick = (event) => {
  room.localParticipant.tracks.forEach((publication) => {
    const track = publication.track;
    // stop releases the media element from the browser control
    // which is useful to turn off the camera light, etc.
    track.stop();
    const elements = track.detach();
    elements.forEach((element) => element.remove());

    document.getElementById('button-share-screen').style.display = 'none';
    document.getElementById('button-unshare-screen').style.display = 'none';
  });
  room.disconnect();

  toggleButtons();

  location.reload();

    if(document.body.contains(document.getElementById('join-button'))){
      document.getElementById('join-button').style.display = 'block';
    }
    if(document.body.contains(document.getElementById('join-button-participant'))){
      document.getElementById('join-button-participant').style.display = 'block';
    } 

  
  };
  const onMuteAudioButton = (event) =>{
    room.localParticipant.audioTracks.forEach(function(audioTrack) {
      audioTrack.track.disable();
    });
    microphone = false;
    document.getElementById("btn_mute").style.display = 'none';
    document.getElementById("btn_unmute").style.display = 'block';
  };

  const onUnMuteAudioButton = (event) =>{
    room.localParticipant.audioTracks.forEach(function(audioTrack) {
      audioTrack.track.enable();
    });
    microphone = true;
    document.getElementById("btn_mute").style.display = 'block';
    document.getElementById("btn_unmute").style.display = 'none';
  };


  const onDisableVideoButton = (event) =>{
    room.localParticipant.videoTracks.forEach(function(videoTrack) {
      videoTrack.track.disable();
    });
    document.getElementById("btn_disable_video").style.display = 'none';
    document.getElementById("btn_enable_video").style.display = 'block';
  };

  const onEnableVideoButton = (event) =>{
    room.localParticipant.videoTracks.forEach(function(videoTrack) {
      videoTrack.track.enable();
    });
    document.getElementById("btn_disable_video").style.display = 'block';
    document.getElementById("btn_enable_video").style.display = 'none';
  };



  if(document.body.contains(document.getElementById('btn_mute'))){
    const muteAudioButton = document.getElementById("btn_mute");  
    muteAudioButton.addEventListener("click",onMuteAudioButton);
  }

  if(document.body.contains(document.getElementById('btn_unmute'))){
    const unmuteAudioButton = document.getElementById("btn_unmute");  
    unmuteAudioButton.addEventListener("click",onUnMuteAudioButton);
  }

  if(document.body.contains(document.getElementById('btn_disable_video'))){
    const disableVideoButton = document.getElementById("btn_disable_video");  
    disableVideoButton.addEventListener("click",onDisableVideoButton);
  }

  if(document.body.contains(document.getElementById('btn_enable_video'))){
    const enableVideoButton = document.getElementById("btn_enable_video");  
    enableVideoButton.addEventListener("click",onEnableVideoButton);
  }


  const toggleButtons = () => {
  document.getElementById("leave-button").classList.toggle("hidden");
  if(document.body.contains(document.getElementById('join-button'))){
    document.getElementById("join-button").classList.toggle("hidden");
  }
  if(document.body.contains(document.getElementById('join-button-participant'))){
    document.getElementById("join-button-participant").classList.toggle("hidden");
  }
  };

  const leaveButton = document.getElementById("leave-button");
  leaveButton.addEventListener("click", onLeaveButtonClick);

  

  function createScreenTrack(height, width) {
    const Video = Twilio.Video;
    if (typeof navigator === 'undefined'
      || !navigator.mediaDevices
      || !navigator.mediaDevices.getDisplayMedia) {
      return Promise.reject(new Error('getDisplayMedia is not supported'));
    }
    return navigator.mediaDevices.getDisplayMedia({
      video: {
        height: height,
        width: width
      }
    }).then(function(stream) {
      return new Video.LocalVideoTrack(stream.getVideoTracks()[0]);
    });
  }

  function checkTrack(track){
    if (track.length > 0) {
      return track[1].kind
    }
    else{
      return track.kind
    }
  }
  function switchPublishedTracks(room, track) {
    room.localParticipant.tracks.forEach(function(trackPublication) {
      debugger;
      if (trackPublication.kind === checkTrack(track) ) {
        trackPublication.track.stop();
        room.localParticipant.unpublishTrack(trackPublication.track);
      }
    });
    if (track.length > 0){
      room.localParticipant.publishTrack(track[1]);
      const localMediaContainer = document.getElementById("local-media-container");
      while (localMediaContainer.lastElementChild){
        localMediaContainer.removeChild(localMediaContainer.lastElementChild);
      }
      track.forEach((localTrack) => {
        localMediaContainer.appendChild(localTrack.attach());
      });
    }
    else{
      room.localParticipant.publishTrack(track);
    }
  }

  document.getElementById('button-share-screen').onclick = async function() {
     try {
       
        // Create and preview your local screen.
        screenTrack = await createScreenTrack(500, 500);
        switchPublishedTracks( room, screenTrack );
        
        // room.localParticipant.publishTrack(screenTrack);
        
      } catch (e) {
        alert(e.message);
      }

     
        document.getElementById('button-share-screen').style.display = 'none';
        document.getElementById('button-unshare-screen').style.display = 'block';
      
  };

  document.getElementById('button-unshare-screen').onclick = function() {
      // room.localParticipant.unpublishTrack(screenTrack);
      switchPublishedTracks( room, localvideo  );
      screenTrack = null;
      document.getElementById('button-share-screen').style.display = 'block';
      document.getElementById('button-unshare-screen').style.display = 'none';
  };
</script>
